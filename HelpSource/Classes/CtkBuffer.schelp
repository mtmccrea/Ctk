CLASS::CtkBuffer
summary::a system for handling buffers in Ctk.
categories::Libraries>Composition ToolKit
keyword::Ctk

DESCRIPTION::
Part of the CompositionToolKit (Ctk) system. See Ctk help for more details

CtkBuffers can be used for both real-time and non-real-time (NRT) purposes, and can be used for soundfile playback, DiskIn allocation and to allocate empty buffer space.

CLASSMETHODS::

method::new
Depending on the parameters passed to the new method, different kinds buffers will be allocated. There are also creation methods for the more commonly used buffer types. If a path is given, the soundfile will be completely loaded into a CtkBuffer for use in UGens such as PlayBuf or BufRd. Size and numChannels will be calculated for you with the SoundFile class. StartFrame defaults to 0 and numFrames defaults to 0 (the entire file is read in). Channels can be a single or an Array of channels to read. Nil (the default) reads all channels.

If a path and a size is given, a CtkBuffer suitable for use with DiskIn is allocated. The buffer is left open and will be closed when the buffer is freed. Size should be a power of 2 (see the DiskIn file for).

If only a size is given, an empty buffer is allocated of size. NnumChannels defaults to 1.
argument::path
The path to the input sound file.
argument::size
The size of a buffer, usually used when creating empty buffers.
argument::startFrame
The first frame of the soundfile to read. The default is 0, which is the beginning of the file.
argument::numFrames
The number of frames to read. The default is -1, which will read the whole file.
argument::numChannels
The number of channels for the buffer.
argument::bufnum
An explicitly specified buffer number. The default is nil. If nil, a buffer id will be allocated for you.
argument::server
The server on which to allocate the buffer. Defaults to Server.default.
argument::channels
An Array of channels to be read from the soundfile. Indices start from zero. These will be read in the order provided.

method::diskin
Create a CtkBuffer suitable for DiskIn usage.
argument::path
A String representing the path of the soundfile to be read.
argument::size
Size defaults to 32768.
argument::startFrame
The first frame of the soundfile to read. The default is 0, which is the beginning of the file.
argument::server
The server on which to allocate the buffer.
argument::channels
Channels can be nil (read all channels), a single number (read only 1 channel) or and Array of channels.

method::playbuf
Create a CtkBuffer suitable for PlayBuf usage.
argument::path
A String representing the path of the soundfile to be read.
argument::startFrame
The first frame of the soundfile to read. The default is 0, which is the beginning of the file.
argument::numFrames
The number of frames to read. The default is -1, which will read the whole file.
argument::server
The server on which to allocate the buffer.
argument::channels
Channels can be nil (read all channels), a single number (read only 1 channel) or and Array of channels.

method::buffer
Create a CtkBuffer of empty size and numChannels.
argument::size
Size defaults to 32768.
argument::numChannels
The number of channels for the buffer.
argument::server
The server on which to allocate the buffer.

method::env
Create a CtkBuffer of a size, filled with values from an Env.
argument::size
Size defaults to 32768.
argument::env
An Env to be loaded into a CtkBuffer.
argument::wavetable
Wavetable is a flag where when 0 (the default) fills the CtkBuffer with a Signal, if 1 then a Wavetable is used.
argument::server
The server on which to allocate the buffer.

method::collection
Create a CtkBuffer from a collection, usually a Signal or RawArray.
argument::collection
Values to be loaded into a buffer.
argument::numChannels
The number of channels for the buffer.
argument::server
The server on which to allocate the buffer.

INSTANCEMETHODS::

method::load
argument::time
For real-time uses, load the file to the server in 'time' seconds. time defaults to 0.0.
argument::sync
Sync defaults to false. If true, a messages will post to let you know the buffer has been allocated. If other methods have been applied to a CtkBuffer (Wave fill commands or other fill or zero commands), these will be sent after the CtkBuffer has been loaded to the server and the message's time parameter is ignored. If you want to schedule something for the future, do it AFTER calling the load method on.
argument::onComplete
An action to be taken upon completion of loading the buffer to the server.  Useful, for instance, in combination with a condition to wait for the buffer to load.


method::free
argument::time
For real-time use, frees and, if necessary, closes the instance of CtkBuffer in 'time' seconds. Defaults to 0.0.
argument::addMsg
Add a message to send to the server.

method::set
Set a value or an Array of values to a CtkBuffer. If using in real-time, the CtkBuffer must be loaded first.
argument::time
In real-time mode, 'time' schedules the set in the future.
argument::startPos
argument::values

method::zero
Zero the values in the buffer out.
argument::time
In real-time mode, 'time' schedules the zero in the future.

method::write
Write a buffer to a file.
argument::time
In real-time mode, 'time' schedules the write in the future.
argument::path
The path of the output file.
argument::headerFormat
The header format of the output file. The default is 'AIFF'.
argument::sampleFormat
The sample format of the output file. The default is 'int16'.
argument::numberOfFrames
The number of frames to write. The defaults is -1 (all frames).
argument::startingFrame
The starting frame of the buffer to write. The default is 0.

method::openWrite
Write a buffer to file. This file is left open for use by DiskOut, and will need to have the closeWrite method applied to the CtkBuffer.
argument::time
In real-time mode, time schedules the openWrite in the future.
argument::path
The path of the output file.
argument::headerFormat
The header format of the output file. The default is 'AIFF'.
argument::sampleFormat
The sample format of the output file. The default is 'int16'.
argument::numberOfFrames
The number of frames to write. The defaults is -1 (all frames).
argument::startingFrame
The starting frame of the buffer to write. The default is 0.

method::closeWrite
Close and write the header for a file that had been created and let open with openWrite.
argument::time
In real-time mode, 'time' schedules the closeWrite in the future.

method::fill
Fill a buffer with newValue starting at sample start for numSamples. From the Server-Command-Reference: " This is only meant for setting a few samples, not whole buffers or large sections"
argument::time
In real-time mode, 'time' schedules the fill in the future.
argument::newValue
argument::start
argument::numSamples

method::addTo
Add this instance of CtkBuffer to a CtkScore for playing or NRT rendering.
note:: All buffers are allocated at the beginning of the score. If a CtkScore is played, all CtkBuffers are loaded to the server before performance begins and may cause a delay. All CtkBuffers are freed when performance of a CtkScore is finished.
::
argument::aCtkScore
A CtkScore to which the CtkBuffer will be added.

method::numChannels
Return the number of channels in a CtkBuffer.

method::duration
Return the duration of the buffer, in seconds.

method::gen
This is the basic template used for the following standard b_gen commands.
argument::time
In real-time mode, 'time' schedules the gen in the future.
argument::cmd
cmd is one of \sine1, \sine2, \sine3, or \cheby.
argument::normalize
Set to 1 to normalize. The defaults is 0 (don't normalize).
argument::wavetable
Specifies whether or not the buffer should use Wavetable format (defaults to 0, set to 1 for Wavetables).
argument::clear
Specifies if the buffer should be cleared before values are set or if new values should add to values previously in the buffer (defaults to 1 to clear values, 0 to add to old ones).
argument::... args
The format of args is dependent on the wave command (see more below).

anchor::sine1::
method::sine1
argument::time
In real-time mode, 'time' schedules the sine1 in the future.
argument::normalize
Set to 1 to normalize. The defaults is 0 (don't normalize).
argument::wavetable
Specifies whether or not the buffer should use Wavetable format (defaults to 0, set to 1 for Wavetables).
argument::clear
Specifies if the buffer should be cleared before values are set or if new values should add to values previously in the buffer (defaults to 1 to clear values, 0 to add to old ones).
argument::... args
Args are individual floats that are applied to harmonic partials of a sine wave and can vary in size. e.g. args = 1 - create a wave with only a fundamental frequency. e.g. args = 0.2, 1, 0.5, 0.2 - four partials, fundamental has an amplitude of 0.2, first partial's is 1, second partial's is 0.5, and the third partial's is 0.2.

anchor::sine2::
method::sine2
argument::time
In real-time mode, 'time' schedules the sine2 in the future.
argument::normalize
Set to 1 to normalize. The defaults is 0 (don't normalize).
argument::wavetable
Specifies whether or not the buffer should use Wavetable format (defaults to 0, set to 1 for Wavetables).
argument::clear
Specifies if the buffer should be cleared before values are set or if new values should add to values previously in the buffer (defaults to 1 to clear values, 0 to add to old ones).
argument::... args
Args are pairs where the first float specifies the frequency of a partial (where 1 is the base frequency of the buffer) and the second value is its amplitude. e.g. args = 1, 0.5, 4, 0.2 - fundamental has a strength of 0.5, and the third partial has a strength of 0.2.

anchor::sine3::
method::sine3
argument::time
In real-time mode, 'time' schedules the sine3 in the future.
argument::normalize
Set to 1 to normalize. The defaults is 0 (don't normalize).
argument::wavetable
Specifies whether or not the buffer should use Wavetable format (defaults to 0, set to 1 for Wavetables).
argument::clear
Specifies if the buffer should be cleared before values are set or if new values should add to values previously in the buffer (defaults to 1 to clear values, 0 to add to old ones).
argument::... args
Args are sets of three values (similar to above) that correspond to partial frequency, amplitude and phase.

method::cheby
argument::time
In real-time mode, 'time' schedules the cheby in the future.
argument::normalize
Set to 1 to normalize. The defaults is 0 (don't normalize).
argument::wavetable
Specifies whether or not the buffer should use Wavetable format (defaults to 0, set to 1 for Wavetables).
argument::clear
Specifies if the buffer should be cleared before values are set or if new values should add to values previously in the buffer (defaults to 1 to clear values, 0 to add to old ones).
argument::... args
Args can be a series of floats that correspond to a series of chebyshev polynomials. The first float is for n = 1, where: cheby(n) = amplitude  * cos(n * acos(x))

method::fillWithEnv
Converts an instance of Env into a Signal or Wavetable, and loads its values to the CtkBuffer.
argument::time
In real-time mode, 'time' schedules the fillWithEnv in the future.
argument::env
An Env to be loaded into a CtkBuffer.
argument::wavetable
Specifies whether or not the buffer should use Wavetable format (defaults to 0, set to 1 for Wavetables).

subsection::Real-time uses
code::
s = Server.internal.boot;
Server.default = s;

//for use with PlayBuf
a = CtkBuffer("sounds/a11wlk01-44_1.aiff").load(sync: true); // load and sync with the server

b = {PlayBuf.ar(1, a)}.play(s);

b.free;

a.free;

// for use with DiskIn
a = CtkBuffer("sounds/a11wlk01-44_1.aiff", 32768).load(sync: true); // load and sync with the server

b = {DiskIn.ar(1, a)}.play(s);

b.free;

a.free;

// for use with delays
a = CtkBuffer("sounds/a11wlk01-44_1.aiff", 32768).load(sync: true); // load and sync with the server
b = CtkBuffer(size: 32768).load(sync: true); // load and sync with the server

c = {var play, del;
	play = DiskIn.ar(1, a);
	del = BufDelayN.ar(b, play, 0.25);
	[play, del]
	}.play(s);

c.free;
a.free;
b.free;

// allocating and setting values
a = CtkBuffer(size: 2048);
a.load(sync: true);
a.set(0.0, 0, Array.fill(1024, {-1.0.rrand(1.0)}));

b = {PlayBuf.ar(1, a, loop: 1)}.play(s);

// change the values in the buffer
a.set(0.0, 1024, Array.fill(1024, {-1.0.rrand(1.0)}));

// zero it out
a.zero;

// refill them
a.set(0.0, 0, Array.fill(1024, {-1.0.rrand(1.0)}));
a.set(0.0, 1024, Array.fill(1024, {0.0.rrand(1.0)}));

b.free;

a.free;

// with Osc, OscN and Shaper with the fill commands

a = CtkBuffer(size: 32768).load(sync: true);
a.sine1(0.0, 1, 1, 1, 0.3);

b = {Osc.ar(a, 440, mul: 0.5)}.play(s);
a.sine1(0.0, 1, 1, 1, 0.3, 0.2, 0.5);
a.sine3(0.0, 1, 1, 1, 1, 0.3, 0.0, 4, 0.2, 0.2, 9, 0.4, 0.5);

b.free;
a.free;

a = CtkBuffer.new(size: 32768).load(sync: true);
a.sine1(0.0, 1, 0, 1, 0.3);

b = {OscN.ar(a, 440, mul: 0.5)}.play(s);
a.sine1(0.0, 1, 0, 1, 0.3, 0.2, 0.5);
a.sine3(0.0, 1, 0, 1, 1, 0.3, 0.0, 4, 0.2, 0.2, 9, 0.4, 0.5);

b.free;
a.free;

a = CtkBuffer(size: 32768);
a.cheby(0.0, 1, 1, 1, 0.3, 0.2, 0.5);
a.load(sync: true);
s.scope;

b = {Shaper.ar(a, SinOsc.ar(440, 0, 0.5), mul: 0.5)}.play(s);

a.cheby(0.0, 1, 1, 1, 1.0, 0.5, 0.2);
a.cheby(0.0, 1, 1, 1, 0.1, 0.5, 1.0);
a.cheby(0.0, 1, 1, 1, 1.0);

b.free;
a.free;

// Test with DiskOut

a = CtkBuffer(size: 32768).load;
// open a file for writing with DiskOut
a.openWrite(0.0, "~/Desktop/test.aiff".standardizePath, 'aiff', 'int16', -1);

b = {DiskOut.ar(a, SinOsc.ar(440, 0, 0.2))}.play(s);

// let it run for a moment... then kill
b.free;
//close the file
a.closeWrite.free;
// test to make sure it worked
a = CtkBuffer("~/Desktop/test.aiff".standardizePath).load;

b = {PlayBuf.ar(1, a)}.play;

b.free; a.free;

// the fillWithEnv method.
a = CtkBuffer.new(size: 1024).fillWithEnv(env: Env([0, 1, 0], [0.5, 0.5], \sin)).load;
b = {SinOsc.ar(440, 0, 0.2) * BufRd.ar(1, a, Phasor.ar(0.0, 0.01, 0, 1024).poll)}.play(s)

b.free;
a.free;
::

subsection::Uses with CtkScore
code::
(
var play, buf, score, playfun;

score = CtkScore.new;

play = CtkNoteObject(
	SynthDef(\play, {arg buffer, rate = 1, dur, start;
		OffsetOut.ar(0,
			Pan2.ar(
				PlayBuf.ar(1, buffer, BufRateScale.kr(buffer) * rate,
					startPos: start * BufSampleRate.kr(buffer)) *
				EnvGen.ar(
					Env([0, 1, 0], [0.5, 0.5], \sin),
					timeScale: dur)))
		})
	);

buf = CtkBuffer("sounds/a11wlk01-44_1.aiff").addTo(score);

//CtkBuffer(size: 1024).set(0.0, 0, Array.fill(1024, {-1.0.rrand(1.0)})).zero(1).addTo(score);

playfun = {arg starttime, gestdur, rateenv;
	var note, now, ratio, rate;
	now = 0;
	while({
		ratio = now / gestdur;
		rate = rateenv[ratio];
		play.new(now + starttime, 0.5)
			.buffer_(buf) // the arg will parse the CtkBuffer and grab its bufnum
			.rate_(CtkControl.env(Env([rate, 1], [1])))
			.dur_(0.5)
			.start_((buf.duration - (0.5 * rate)).rand)
			.addTo(score);
		now = now + 0.2;
		now < gestdur;
		});
	};

playfun.value(0, 20, Env([0.5, 2.0, 1.0], [0.2, 0.8], [3, -5]));

// uncomment to play the score
//[score.notes, score.groups, score.controls, score.messages].postln;
score.play
// uncomment to save the score
//score.saveToFile("~/Desktop/test.sc".standardizePath);
// uncomment to write the score to a soundfile
//score.write("~/Desktop/test.aiff".standardizePath,
//	options: ServerOptions.new.numOutputBusChannels_(2));
)
::