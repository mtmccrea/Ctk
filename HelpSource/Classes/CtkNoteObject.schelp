CLASS::CtkNoteObject
summary::A prototyping system based on SynthDefs.
categories::Libraries>Composition ToolKit
keyword::Ctk

In general, you will not need to create instances of CtkNoteObj. CtkProtoNotes will do it for you. The main purpose of this class is the creation of new instances of CtkNote based on a CtkNoteObject prototype.

CLASSMETHODS::

method::new
Create a new instance of a note object.  Mostly used internally by CtkSynthDef or CtkProtoNotes.
argument::synthdef
An instance of SynthDef.
argument::server
An instance of Server.

INSTANCEMETHODS::
method::note
argument::starttime
In NRT or CtkScore rendering mode, the starttime of an CtkNote event. In real-time mode, this parameter will schedule the event for starttime seconds in the future.
argument::duration
If not nil, schedules the release of an CtkNote (works in both real-time and non-real-time).
argument::addAction
A symbol (\head, \tail, \before, \after or \replace) or an addAction id (see Server-Command-Reference) for and the /s_new section for a more in-depth description)
argument::target
A node ID (synth or group) or an instance of CtkGroup or CtkNote
argument::server
The server to execute the node on. Defaults to Server.default for real-time performance.

method::args
argument::post
If 'post' is true, post a list of controls and defaults to the post window.  The Dictionary containing the argument names as keys and default values is returned.

Examples::
code::
a = CtkNoteObject.new(
	SynthDef(\test2, {arg gate = 1, freq, amp;
		var env, envgen, src;
		env = Control.names([\env]).kr(Env.newClear(8));
		envgen = EnvGen.kr(env, gate, doneAction: 2);
		src = BPF.ar(WhiteNoise.ar(amp), freq, 0.01, amp * envgen);
		Out.ar(0, Pan2.ar(src, Rand(-1.0, 1.0)));
		})
	);

// show the args
a.args;

// create a new instance of CtkNote based on this prototype
b = a.new;

// set values for its arguments. See the CtkNote helpfile for more info on arguments
b.freq_(440).amp_(1.0).env_(Env([0, 1, 0], [0.5, 0.5], \sin, 1));

// play it
b.play;

// create a second instance with different args ...
c = a.new.freq_(660).amp_(1.0).env_(Env([0, 1, 0], [5, 5], \sin, 1)).play;

// release both
b.release; c.release;

Examples that create new instances of a SynthDef directly from CtkProtoNotes:

s = Server.internal.boot;
Server.default = s;

a = CtkProtoNotes(
	SynthDef(\test, {arg gate = 1, freq, amp;
		var env, envgen, src;
		env = Control.names([\env]).kr(Env.newClear(8));
		envgen = EnvGen.kr(env, gate, doneAction: 2);
		src = SinOsc.ar(freq, 0, amp * envgen);
		Out.ar(0, Pan2.ar(src, Rand(-1.0, 1.0)));
		}),
	SynthDef(\control, {arg outbus, rate, low, hi;
		Out.kr(outbus, LFNoise2.kr(rate).range(low, hi))
		}),
	SynthDef(\test2, {arg gate = 1, freq, amp;
		var env, envgen, src;
		env = Control.names([\env]).kr(Env.newClear(8));
		envgen = EnvGen.kr(env, gate, doneAction: 2);
		src = BPF.ar(WhiteNoise.ar(amp), freq, 0.01, amp * envgen);
		Out.ar(0, Pan2.ar(src, Rand(-1.0, 1.0)));
		})
	);

b = a[\test2].new.freq_(440).amp_(1.0).env_(Env([0, 1, 0], [0.5, 0.5], \sin, 1)).play;
c = a[\test].new.freq_(440).amp_(0.1).env_(Env([0, 1, 0], [0.5, 0.5], \sin, 1)).play;

c.release;
b.release;
::